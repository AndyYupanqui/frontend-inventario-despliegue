{"version":3,"sources":["webpack:///./src/app/services/clientes.service.ts","webpack:///./src/app/services/proveedores.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Global } from './global';\r\n\r\n@Injectable()\r\nexport class ClienteService {\r\n    public url: string;\r\n\r\n    constructor(private _http: HttpClient) {\r\n        this.url = Global.url\r\n    }\r\n\r\n    listarClientes(): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/clientes', { headers: headers });\r\n    }\r\n\r\n    nuevoCliente(form): Observable<any> {\r\n        let body = JSON.stringify(form);\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.post(this.url + '/cliente', body, { headers: headers });\r\n    }\r\n\r\n    borrarCliente(ClienteId): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.delete(this.url + '/cliente/' + ClienteId, { headers: headers });\r\n    }\r\n\r\n    buscarCliente(ClienteRuc): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/cliente/' + ClienteRuc, { headers: headers });\r\n    }\r\n\r\n    actualizarCliente(id, Cliente): Observable<any> {\r\n        let params = JSON.stringify(Cliente)\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.put(this.url + '/cliente/' + id, params, { headers: headers });\r\n    }\r\n\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Global } from './global';\r\n\r\n@Injectable()\r\nexport class ProveedorService {\r\n    public url: string;\r\n\r\n    constructor(private _http: HttpClient) {\r\n        this.url = Global.url\r\n    }\r\n\r\n    listarProveedores(): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/proveedores', { headers: headers });\r\n    }\r\n\r\n    nuevoProveedor(form): Observable<any> {\r\n        let body = JSON.stringify(form);\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.post(this.url + '/proveedor', body, { headers: headers });\r\n    }\r\n\r\n    borrarProveedor(proveedorId): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.delete(this.url + '/proveedor/' + proveedorId, { headers: headers });\r\n    }\r\n\r\n    buscarProveedor(proveedorRuc): Observable<any> {\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.get(this.url + '/proveedor/' + proveedorRuc, { headers: headers });\r\n    }\r\n\r\n    actualizarProveedor(id, proveedor): Observable<any> {\r\n        let params = JSON.stringify(proveedor)\r\n        let headers = new HttpHeaders().set('Content-Type', 'application/json');\r\n        return this._http.put(this.url + '/proveedor/' + id, params, { headers: headers });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}